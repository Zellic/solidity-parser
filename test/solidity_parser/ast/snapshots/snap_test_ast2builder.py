# -*- coding: utf-8 -*-
# snapshottest: v1 - https://goo.gl/zC4yUc
from __future__ import unicode_literals

from snapshottest import Snapshot


snapshots = Snapshot()

snapshots['TestSolidityTypeHelper::test_get_expr_type 1'] = [
    "BinaryOp(left=Ident(text='arg'), right=Literal(value=2, unit=None), op=<BinaryOpCode.MUL: '*'>) :: uint256",
    'Literal(value=2, unit=None) :: uint8(2)',
    "BinaryOp(left=Ident(text='arg'), right=Literal(value=2, unit=None), op=<BinaryOpCode.MUL: '*'>) :: uint256",
    'Literal(value=2, unit=None) :: uint8(2)',
    "BinaryOp(left=GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')), right=Ident(text='addressValue'), op=<BinaryOpCode.EQ: '=='>) :: bool",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    "BinaryOp(left=GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')), right=Ident(text='addressValue'), op=<BinaryOpCode.EQ: '=='>) :: bool",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    "CallFunction(callee=Ident(text='CustomError'), special_call_options=[], args=[Literal(value='This is a custom error', unit=None)]) :: error(CustomError)",
    "Literal(value='This is a custom error', unit=None) :: string(22)",
    "CallFunction(callee=Ident(text='CustomError'), special_call_options=[], args=[Literal(value='This is a custom error', unit=None)]) :: error(CustomError)",
    "Literal(value='This is a custom error', unit=None) :: string(22)",
    "BinaryOp(left=Ident(text='booleanValue'), right=Literal(value=True, unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: bool",
    'Literal(value=True, unit=None) :: bool',
    "BinaryOp(left=Ident(text='integerValue'), right=UnaryOp(expr=Literal(value=42, unit=None), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True), op=<BinaryOpCode.ASSIGN: '='>) :: uint8(6)",
    "UnaryOp(expr=Literal(value=42, unit=None), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True) :: uint8(6)",
    'Literal(value=42, unit=None) :: uint8(6)',
    "BinaryOp(left=Ident(text='unsignedValue'), right=Literal(value=42, unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: uint8(6)",
    'Literal(value=42, unit=None) :: uint8(6)',
    "BinaryOp(left=Ident(text='addressValue'), right=GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')), op=<BinaryOpCode.ASSIGN: '='>) :: address",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    "BinaryOp(left=Ident(text='bytesValue'), right=CallFunction(callee=BytesType(base_type=FixedLengthArrayType(base_type=ByteType(), size=1)), special_call_options=[], args=[Literal(value='Hello, Solidity!', unit=None)]), op=<BinaryOpCode.ASSIGN: '='>) :: bytes",
    "CallFunction(callee=BytesType(base_type=FixedLengthArrayType(base_type=ByteType(), size=1)), special_call_options=[], args=[Literal(value='Hello, Solidity!', unit=None)]) :: bytes",
    "Literal(value='Hello, Solidity!', unit=None) :: string(16)",
    "BinaryOp(left=Ident(text='stringValue'), right=Literal(value='Hello, World!', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(13)",
    "Literal(value='Hello, World!', unit=None) :: string(13)",
    "BinaryOp(left=Ident(text='fixedArray'), right=NewInlineArray(elements=[CallFunction(callee=IntType(is_signed=False, size=256), special_call_options=[], args=[Literal(value=1, unit=None)]), Literal(value=2, unit=None), Literal(value=3, unit=None)]), op=<BinaryOpCode.ASSIGN: '='>) :: uint256[3]",
    'NewInlineArray(elements=[CallFunction(callee=IntType(is_signed=False, size=256), special_call_options=[], args=[Literal(value=1, unit=None)]), Literal(value=2, unit=None), Literal(value=3, unit=None)]) :: uint256[3]',
    'CallFunction(callee=IntType(is_signed=False, size=256), special_call_options=[], args=[Literal(value=1, unit=None)]) :: uint256',
    'Literal(value=1, unit=None) :: uint8(1)',
    'Literal(value=2, unit=None) :: uint8(2)',
    'Literal(value=3, unit=None) :: uint8(2)',
    "CallFunction(callee=GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')), special_call_options=[], args=[Literal(value=4, unit=None)]) :: []",
    "GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')) :: [FunctionType(input_params=[], outputs=[IntType(is_signed=False, size=256)], modifiers=[]), FunctionType(input_params=[FunctionParameter(name=Ident(text=''), ttype=IntType(is_signed=False, size=256))], outputs=[], modifiers=[])]",
    'Literal(value=4, unit=None) :: uint8(3)',
    "CallFunction(callee=GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')), special_call_options=[], args=[Literal(value=5, unit=None)]) :: []",
    "GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')) :: [FunctionType(input_params=[], outputs=[IntType(is_signed=False, size=256)], modifiers=[]), FunctionType(input_params=[FunctionParameter(name=Ident(text=''), ttype=IntType(is_signed=False, size=256))], outputs=[], modifiers=[])]",
    'Literal(value=5, unit=None) :: uint8(3)',
    "BinaryOp(left=Ident(text='myStructValue'), right=CallFunction(callee=Ident(text='MyStruct'), special_call_options=[], args=[Literal(value=10, unit=None), Literal(value='Example', unit=None)]), op=<BinaryOpCode.ASSIGN: '='>) :: ResolvedUserType(MyStruct)",
    "CallFunction(callee=Ident(text='MyStruct'), special_call_options=[], args=[Literal(value=10, unit=None), Literal(value='Example', unit=None)]) :: ResolvedUserType(MyStruct)",
    'Literal(value=10, unit=None) :: uint8(4)',
    "Literal(value='Example', unit=None) :: string(7)",
    "BinaryOp(left=Ident(text='enumValue'), right=GetMember(obj_base=Ident(text='MyEnum'), name=Ident(text='Option1')), op=<BinaryOpCode.ASSIGN: '='>) :: ResolvedUserType(MyEnum)",
    "GetMember(obj_base=Ident(text='MyEnum'), name=Ident(text='Option1')) :: [ResolvedUserType(MyEnum)]",
    "BinaryOp(left=GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=1, unit=None)), right=Literal(value='One', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(3)",
    "GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=1, unit=None)) :: string",
    'Literal(value=1, unit=None) :: uint8(1)',
    "Literal(value='One', unit=None) :: string(3)",
    "BinaryOp(left=GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=2, unit=None)), right=Literal(value='Two', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(3)",
    "GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=2, unit=None)) :: string",
    'Literal(value=2, unit=None) :: uint8(2)',
    "Literal(value='Two', unit=None) :: string(3)",
    "BinaryOp(left=GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=3, unit=None)), right=Literal(value='Three', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(5)",
    "GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=3, unit=None)) :: string",
    'Literal(value=3, unit=None) :: uint8(2)',
    "Literal(value='Three', unit=None) :: string(5)",
    "CallFunction(callee=Ident(text='MyEvent'), special_call_options=[], args=[GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')), Literal(value=100, unit=None)]) :: []",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    'Literal(value=100, unit=None) :: uint8(7)',
    "BinaryOp(left=Ident(text='payableAddress'), right=PayableConversion(args=[GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender'))]), op=<BinaryOpCode.ASSIGN: '='>) :: address payable",
    "PayableConversion(args=[GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender'))]) :: address payable",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    'Literal(value=10, unit=None) :: uint8(4)',
    'Literal(value=5, unit=None) :: uint8(3)',
    "BinaryOp(left=Ident(text='booleanValue'), right=Literal(value=True, unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: bool",
    'Literal(value=True, unit=None) :: bool',
    "BinaryOp(left=Ident(text='integerValue'), right=UnaryOp(expr=Literal(value=42, unit=None), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True), op=<BinaryOpCode.ASSIGN: '='>) :: uint8(6)",
    "UnaryOp(expr=Literal(value=42, unit=None), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True) :: uint8(6)",
    'Literal(value=42, unit=None) :: uint8(6)',
    "BinaryOp(left=Ident(text='unsignedValue'), right=Literal(value=42, unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: uint8(6)",
    'Literal(value=42, unit=None) :: uint8(6)',
    "BinaryOp(left=Ident(text='addressValue'), right=GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')), op=<BinaryOpCode.ASSIGN: '='>) :: address",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    "BinaryOp(left=Ident(text='bytesValue'), right=CallFunction(callee=BytesType(base_type=FixedLengthArrayType(base_type=ByteType(), size=1)), special_call_options=[], args=[Literal(value='Hello, Solidity!', unit=None)]), op=<BinaryOpCode.ASSIGN: '='>) :: bytes",
    "CallFunction(callee=BytesType(base_type=FixedLengthArrayType(base_type=ByteType(), size=1)), special_call_options=[], args=[Literal(value='Hello, Solidity!', unit=None)]) :: bytes",
    "Literal(value='Hello, Solidity!', unit=None) :: string(16)",
    "BinaryOp(left=Ident(text='stringValue'), right=Literal(value='Hello, World!', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(13)",
    "Literal(value='Hello, World!', unit=None) :: string(13)",
    "BinaryOp(left=Ident(text='fixedArray'), right=NewInlineArray(elements=[CallFunction(callee=IntType(is_signed=False, size=256), special_call_options=[], args=[Literal(value=1, unit=None)]), Literal(value=2, unit=None), Literal(value=3, unit=None)]), op=<BinaryOpCode.ASSIGN: '='>) :: uint256[3]",
    'NewInlineArray(elements=[CallFunction(callee=IntType(is_signed=False, size=256), special_call_options=[], args=[Literal(value=1, unit=None)]), Literal(value=2, unit=None), Literal(value=3, unit=None)]) :: uint256[3]',
    'CallFunction(callee=IntType(is_signed=False, size=256), special_call_options=[], args=[Literal(value=1, unit=None)]) :: uint256',
    'Literal(value=1, unit=None) :: uint8(1)',
    'Literal(value=2, unit=None) :: uint8(2)',
    'Literal(value=3, unit=None) :: uint8(2)',
    "CallFunction(callee=GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')), special_call_options=[], args=[Literal(value=4, unit=None)]) :: []",
    "GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')) :: [FunctionType(input_params=[], outputs=[IntType(is_signed=False, size=256)], modifiers=[]), FunctionType(input_params=[FunctionParameter(name=Ident(text=''), ttype=IntType(is_signed=False, size=256))], outputs=[], modifiers=[])]",
    'Literal(value=4, unit=None) :: uint8(3)',
    "CallFunction(callee=GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')), special_call_options=[], args=[Literal(value=5, unit=None)]) :: []",
    "GetMember(obj_base=Ident(text='dynamicArray'), name=Ident(text='push')) :: [FunctionType(input_params=[], outputs=[IntType(is_signed=False, size=256)], modifiers=[]), FunctionType(input_params=[FunctionParameter(name=Ident(text=''), ttype=IntType(is_signed=False, size=256))], outputs=[], modifiers=[])]",
    'Literal(value=5, unit=None) :: uint8(3)',
    "BinaryOp(left=Ident(text='myStructValue'), right=CallFunction(callee=Ident(text='MyStruct'), special_call_options=[], args=[Literal(value=10, unit=None), Literal(value='Example', unit=None)]), op=<BinaryOpCode.ASSIGN: '='>) :: ResolvedUserType(MyStruct)",
    "CallFunction(callee=Ident(text='MyStruct'), special_call_options=[], args=[Literal(value=10, unit=None), Literal(value='Example', unit=None)]) :: ResolvedUserType(MyStruct)",
    'Literal(value=10, unit=None) :: uint8(4)',
    "Literal(value='Example', unit=None) :: string(7)",
    "BinaryOp(left=Ident(text='enumValue'), right=GetMember(obj_base=Ident(text='MyEnum'), name=Ident(text='Option1')), op=<BinaryOpCode.ASSIGN: '='>) :: ResolvedUserType(MyEnum)",
    "GetMember(obj_base=Ident(text='MyEnum'), name=Ident(text='Option1')) :: [ResolvedUserType(MyEnum)]",
    "BinaryOp(left=GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=1, unit=None)), right=Literal(value='One', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(3)",
    "GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=1, unit=None)) :: string",
    'Literal(value=1, unit=None) :: uint8(1)',
    "Literal(value='One', unit=None) :: string(3)",
    "BinaryOp(left=GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=2, unit=None)), right=Literal(value='Two', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(3)",
    "GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=2, unit=None)) :: string",
    'Literal(value=2, unit=None) :: uint8(2)',
    "Literal(value='Two', unit=None) :: string(3)",
    "BinaryOp(left=GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=3, unit=None)), right=Literal(value='Three', unit=None), op=<BinaryOpCode.ASSIGN: '='>) :: string(5)",
    "GetArrayValue(array_base=Ident(text='keyValueMapping'), index=Literal(value=3, unit=None)) :: string",
    'Literal(value=3, unit=None) :: uint8(2)',
    "Literal(value='Three', unit=None) :: string(5)",
    "CallFunction(callee=Ident(text='MyEvent'), special_call_options=[], args=[GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')), Literal(value=100, unit=None)]) :: []",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    'Literal(value=100, unit=None) :: uint8(7)',
    "BinaryOp(left=Ident(text='payableAddress'), right=PayableConversion(args=[GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender'))]), op=<BinaryOpCode.ASSIGN: '='>) :: address payable",
    "PayableConversion(args=[GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender'))]) :: address payable",
    "GetMember(obj_base=Ident(text='msg'), name=Ident(text='sender')) :: [AddressType(is_payable=False)]",
    'Literal(value=10, unit=None) :: uint8(4)',
    'Literal(value=5, unit=None) :: uint8(3)',
    "BinaryOp(left=Ident(text='integerValue'), right=CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Ident(text='newValue')]), op=<BinaryOpCode.ASSIGN: '='>) :: int256",
    "CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Ident(text='newValue')]) :: int256",
    "BinaryOp(left=Ident(text='integerValue'), right=CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Ident(text='newValue')]), op=<BinaryOpCode.ASSIGN: '='>) :: int256",
    "CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Ident(text='newValue')]) :: int256",
    'Literal(value=1, unit=None) :: uint8(1)',
    "UnaryOp(expr=Ident(text='a'), op=<UnaryOpCode.INC: '++'>, is_pre=False) :: int128",
    "UnaryOp(expr=Ident(text='a'), op=<UnaryOpCode.DEC: '--'>, is_pre=False) :: int128",
    'Literal(value=2, unit=None) :: uint8(2)',
    "BinaryOp(left=Ident(text='b'), right=UnaryOp(expr=Ident(text='b'), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True), op=<BinaryOpCode.ASSIGN: '='>) :: uint256",
    "UnaryOp(expr=Ident(text='b'), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True) :: uint256",
    'Literal(value=5, unit=None) :: uint8(3)',
    "UnaryOp(expr=Ident(text='c'), op=<UnaryOpCode.BIT_NEG: '~'>, is_pre=True) :: uint8",
    'Literal(value=False, unit=None) :: bool',
    "UnaryOp(expr=Ident(text='k'), op=<UnaryOpCode.BOOL_NEG: '!'>, is_pre=True) :: bool",
    'Literal(value=1, unit=None) :: uint8(1)',
    "UnaryOp(expr=Ident(text='a'), op=<UnaryOpCode.INC: '++'>, is_pre=False) :: int128",
    "UnaryOp(expr=Ident(text='a'), op=<UnaryOpCode.DEC: '--'>, is_pre=False) :: int128",
    'Literal(value=2, unit=None) :: uint8(2)',
    "BinaryOp(left=Ident(text='b'), right=UnaryOp(expr=Ident(text='b'), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True), op=<BinaryOpCode.ASSIGN: '='>) :: uint256",
    "UnaryOp(expr=Ident(text='b'), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True) :: uint256",
    'Literal(value=5, unit=None) :: uint8(3)',
    "UnaryOp(expr=Ident(text='c'), op=<UnaryOpCode.BIT_NEG: '~'>, is_pre=True) :: uint8",
    'Literal(value=False, unit=None) :: bool',
    "UnaryOp(expr=Ident(text='k'), op=<UnaryOpCode.BOOL_NEG: '!'>, is_pre=True) :: bool",
    "GetMember(obj_base=CreateMetaType(base_type=UserType(name=Ident(text='AllTypesExample'))), name=Ident(text='name')) :: [StringType(base_type=FixedLengthArrayType(base_type=ByteType(), size=1))]",
    "CreateMetaType(base_type=UserType(name=Ident(text='AllTypesExample'))) :: type(ResolvedUserType(AllTypesExample))",
    "GetMember(obj_base=CreateMetaType(base_type=UserType(name=Ident(text='AllTypesExample'))), name=Ident(text='name')) :: [StringType(base_type=FixedLengthArrayType(base_type=ByteType(), size=1))]",
    "CreateMetaType(base_type=UserType(name=Ident(text='AllTypesExample'))) :: type(ResolvedUserType(AllTypesExample))",
    "Literal(value=(GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='min')), GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='max'))), unit=None) :: (int16, int16)",
    "GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='min')) :: [IntType(is_signed=True, size=16)]",
    'CreateMetaType(base_type=IntType(is_signed=True, size=16)) :: type(int16)',
    "GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='max')) :: [IntType(is_signed=True, size=16)]",
    'CreateMetaType(base_type=IntType(is_signed=True, size=16)) :: type(int16)',
    "Literal(value=(GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='min')), GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='max'))), unit=None) :: (int16, int16)",
    "GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='min')) :: [IntType(is_signed=True, size=16)]",
    'CreateMetaType(base_type=IntType(is_signed=True, size=16)) :: type(int16)',
    "GetMember(obj_base=CreateMetaType(base_type=IntType(is_signed=True, size=16)), name=Ident(text='max')) :: [IntType(is_signed=True, size=16)]",
    'CreateMetaType(base_type=IntType(is_signed=True, size=16)) :: type(int16)',
    "CallFunction(callee=New(type_name=UserType(name=Ident(text='AllTypesExample'))), special_call_options=[], args=[]) :: ResolvedUserType(AllTypesExample)",
    "New(type_name=UserType(name=Ident(text='AllTypesExample'))) :: ResolvedUserType(AllTypesExample)",
    "CallFunction(callee=New(type_name=UserType(name=Ident(text='AllTypesExample'))), special_call_options=[], args=[]) :: ResolvedUserType(AllTypesExample)",
    "New(type_name=UserType(name=Ident(text='AllTypesExample'))) :: ResolvedUserType(AllTypesExample)"
]

snapshots['TestSolidityTypeHelper::test_get_function_expr_type 1'] = [
    "CallFunction(callee=Ident(text='MyError'), special_call_options=[], args=[Literal(value='This is a custom error', unit=None)]) :: error(MyError)",
    "CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Ident(text='newValue')]) :: int256",
    "CallFunction(callee=Ident(text='functionWithInputs'), special_call_options=[], args=[Literal(value=5, unit=None), Literal(value='hi', unit=None)]) :: [IntType(is_signed=False, size=256)]",
    "CallFunction(callee=Ident(text='functionWithoutInputs'), special_call_options=[], args=[]) :: [IntType(is_signed=False, size=256)]",
    "CallFunction(callee=Ident(text='voidFunction'), special_call_options=[], args=[Ident(text='k')]) :: []"
]

snapshots['TestSolidityTypeHelper::test_get_function_expr_type_inline_arrays 1'] = [
    'NewInlineArray(elements=[Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None)]) :: uint8(1)[5]',
    'NewInlineArray(elements=[Literal(value=1, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None)]) :: uint8(1)[5]',
    "NewInlineArray(elements=[CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Literal(value=1, unit=None)]), CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[UnaryOp(expr=Literal(value=1, unit=None), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True)]), CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Literal(value=0, unit=None)]), CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Literal(value=0, unit=None)]), CallFunction(callee=IntType(is_signed=True, size=256), special_call_options=[], args=[Literal(value=0, unit=None)])]) :: int256[5]",
    'NewInlineArray(elements=[CallFunction(callee=IntType(is_signed=True, size=8), special_call_options=[], args=[Literal(value=0, unit=None)]), CallFunction(callee=IntType(is_signed=True, size=8), special_call_options=[], args=[Literal(value=0, unit=None)]), CallFunction(callee=IntType(is_signed=True, size=8), special_call_options=[], args=[Literal(value=0, unit=None)]), CallFunction(callee=IntType(is_signed=True, size=8), special_call_options=[], args=[Literal(value=0, unit=None)]), CallFunction(callee=IntType(is_signed=True, size=8), special_call_options=[], args=[Literal(value=0, unit=None)])]) :: int8[5]',
    "NewInlineArray(elements=[Literal(value=1, unit=None), UnaryOp(expr=Literal(value=1, unit=None), op=<UnaryOpCode.SIGN_NEG: '-'>, is_pre=True), Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None)]) :: uint8(1)[5]",
    'NewInlineArray(elements=[Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None), Literal(value=0, unit=None)]) :: uint8(1)[5]'
]

snapshots['TestSolidityTypeHelper::test_get_function_expr_type_ternary 1'] = [
    "TernaryOp(condition=Ident(text='za'), left=Ident(text='x1'), right=Ident(text='y1')) :: uint256",
    "TernaryOp(condition=Ident(text='zb'), left=Ident(text='x2'), right=Ident(text='y2')) :: uint256",
    "TernaryOp(condition=Ident(text='zb'), left=Ident(text='y2'), right=Ident(text='x2')) :: uint256",
    "TernaryOp(condition=Ident(text='z1'), left=Ident(text='a1'), right=Ident(text='b1')) :: ResolvedUserType(BaseContract)"
]
